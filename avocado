/**
 * @author Piotr Kmiecik
 * @date 24.04.2018
 *
 * Little helper program based on artisan from Laravel PHP framework
 *
 * Commands:
 * help
 * make
 * make bundle {bname}
 * make controller {bundle} {bname}
 * make model {bundle} {bname}
 * make validator {bundle} {bname}
 * make router {bundle} {bname}
 *
 */

var fs = require('fs');
var exec = require('child_process').exec;
var args = process.argv.slice(2);

// todo update
const templates = {
    bundle:     "import {Application} from 'express';\n" +
                "import {bname}Router from './routers/{bname}Router';\n" +
                "\n" +
                "export default class {bname}Bundle\n" +
                "{\n" +
                "\tpublic static init(app: Application)\n" +
                "\t{\n" +
                "\t\tapp.use('/{sname}/', {bname}Router.getRouter(this.name));\n" +
                "\t}\n" +
                "}",

    controller: "import { Request, Response } from 'express';\n" +
                "import CoreController from '../../../../vendor/controller/CoreController';\n" +
                "import {bname} from '../models/{bname}';\n" +
                "\n" +
                "export class {bname}Controller extends CoreController\n" +
                "{\n" +
                "\tpublic index(request: Request, response: Response)\n" +
                "\t{\n" +
                "\t\t// todo: your magic\n" +
                "\t}\n" +
                "}",

    validator:  "import CoreValidator from '../../../../vendor/validator/CoreValidator';\n" +
                "\n" +
                "export class {bname}Validator extends CoreValidator\n" +
                "{\n" +
                "\tvalidator()\n" +
                "\t{\n" +
                "\t\treturn {\n" +
                "\t\t\t// todo: your magic\n" +
                "\t\t};\n" +
                "\t}\n" +
                "}",

    router:     "import CoreRouter from '../../../../vendor/router/CoreRouter';\n" +
                "\n" +
                "export default class {bname}Router extends CoreRouter\n" +
                "{\n" +
                "\troutes()\n" +
                "\t{\n" +
                "\t\tthis.get('/', '{bname}Controller@index');\n" +
                "\t\t// todo: your magic\n" +
                "\t}\n" +
                "}",

    model:      "import { Schema, model } from 'mongoose'\n" +
                "\n" +
                "const {bname}Schema: Schema = new Schema({\n" +
                "\t// todo: your magic\n" +
                "});\n" +
                "\n" +
                "export default model('{bname}', {bname}Schema);"
};

try {
    switch (args[0]) {
        case 'make':
            make(args[1], args[2], args[3]);
            break;
        case 'serve':
            exec('tsc && node ./build/index.js', (error, stdout, stderr) => {
                error && console.log(error);
                stdout && console.log(stdout);
                stderr && console.log(stderr);
            });
            break;
        case 'help':
        default:
            help();
    }
} catch (exception) {

    console.log(exception);
}

function make(what, bundleName, elementName)
{
    what = what.toLowerCase();
    bundleName = bundleName.toLowerCase();
    if(elementName) {
        elementName = elementName.toLowerCase();
    }

    switch (what) {
        case 'bundle':
            valid(bundleName);
            break;
        case 'controller':
        case 'model':
        case 'validator':
        case 'router':
            valid(bundleName, elementName, what);
            break;
        default:
            help();
    }
}

function makeBundle(bundleName, bundlePath)
{
    fs.mkdirSync(`${bundlePath}`);
    console.log(`${bundlePath} created`);

    fs.mkdirSync(`${bundlePath}/controllers`);
    fs.mkdirSync(`${bundlePath}/models`);
    fs.mkdirSync(`${bundlePath}/validators`);
    fs.mkdirSync(`${bundlePath}/routers`);

    make('controller', bundleName, bundleName);
    make('model', bundleName, bundleName);
    make('router', bundleName, bundleName);

    write('bundle',
        bundleName,
        bundleName.toLowerCase(),
        bundlePath + "/" + bundleName + "Bundle.ts");
}

function write(element, bname, sname, path)
{
    console.log(`${path} created`);
    fs.writeFileSync(path, fill(bname, sname, templates[element]));

    if(element === 'router'){
        const bundleName = path.slice(path.indexOf("/bundles/") + 9, path.indexOf("/routers/"));
        const bundlePath = path.slice(0, path.indexOf("routers/")) + bundleName + '.ts';

        if(fs.existsSync(bundlePath)){
            updateBundleRouters(
                bundlePath,
                bundleName,
                bname,
                sname
            )
        }
    }

    if(element === 'bundle'){
        updateBundlesImport(
            bname + element[0].toUpperCase() + element.slice(1),
            path.replace('.ts', '')
                .replace('/src', '')
        );
    }
}

function updateBundleRouters(path, name, bname, sname)
{
    let bundle = fs.readFileSync(path).toString();
    const insertImportIndex = bundle.indexOf('\n\n');

    bundle = [bundle.slice(0, insertImportIndex),
              `\nimport ${bname}Router from './routers/${bname}Router';`,
              bundle.slice(insertImportIndex)].join('');

    const routersIndex = bundle.indexOf("public static init(app: Application)");
    const insertRoutersIndex = routersIndex + bundle.slice(routersIndex).indexOf("{") + 2;

    bundle = [bundle.slice(0, insertRoutersIndex),
        `\t\tapp.use('/${sname}/', ${bname}Router.getRouter(this.name));\n`,
        bundle.slice(insertRoutersIndex)].join('');

    fs.writeFileSync(path, bundle);
    console.log(name + ' updated');
}

function updateBundlesImport(name, path)
{
    let server = fs.readFileSync('./src/app/server.ts').toString();
    const importsIndex = server.indexOf("// import bundles");
    const insertImportIndex = (importsIndex !== -1) ? (importsIndex+17) : 0;

    server = [server.slice(0, insertImportIndex),
             `\nimport ${name} from '${path.replace('/app', '')}';`,
             server.slice(insertImportIndex)].join('');

    const bundlesIndex = server.indexOf("bundles(): void");
    const insertBundlesIndex = bundlesIndex + server.slice(bundlesIndex).indexOf("{") + 1;

    server = [server.slice(0, insertBundlesIndex),
        `\n\t\t${name}.init(this.app);`,
        server.slice(insertBundlesIndex)].join('');

    fs.writeFileSync('./src/app/server.ts', server);
    console.log('Server.ts updated');
}

function valid(bundle, name, element, next)
{
    if(typeof bundle === 'string' && bundle.length){
        bundle = bundle[0].toUpperCase() + bundle.slice(1);
        const bundlePath = `./src/app/bundles/${bundle}Bundle`;
        if(typeof name !== 'undefined') {
            if (typeof name === 'string' && name.length) {
                if (fs.existsSync(bundlePath)) {
                    const dirPath = `${bundlePath}/${element}s`;
                    element = element[0].toUpperCase() + element.slice(1);
                    if (fs.existsSync(dirPath)) {
                        const elementName = name[0].toUpperCase() + name.slice(1);
                        const elementInName = element === 'Model' ? '' : element;
                        const elementPath = `${dirPath}/${elementName + elementInName}.ts`;
                        if (!fs.existsSync(elementPath)) {
                            write(
                                element.toLowerCase(),
                                name[0].toUpperCase() + name.slice(1),
                                name,
                                elementPath
                            );
                        } else {
                            throw(`${element} '${elementName}' already exists`);
                        }
                    } else {
                        fs.mkdirSync(dirPath);
                        valid(bundle, name, element, next);
                    }
                } else {
                    throw(`bundle '${bundle}' not exists`);
                }
            } else {
                throw(`${element} name have to be string type with minimum one character`);
            }
        } else {
            if (!fs.existsSync(bundlePath)) {
                makeBundle(bundle, bundlePath);
            } else {
                throw(`bundle '${bundle}' already exists`);
            }
        }
    } else {
        throw('bundle name have to be string type with minimum one character');
    }
}

function help()
{
    console.log('help');
}

function fill(bname, sname, text)
{
    return text.replace(/{bname}/g, bname)
               .replace(/{sname}/g, sname);
}